# import pfhedgenew.nn.modules.datahedger as datahedgerold
# reload(datahedgerold)


# def to_numpy(tensor: torch.Tensor) -> np.array:
#     return tensor.cpu().detach().numpy()

# def plot_helper(hedger_old, history):
#     pnl = hedger_old.compute_pnl(data_set_old)
#     price = to_numpy(hedger_old.pricer())

#     smooth_history = np.convolve(np.array(history),np.ones(100)/100, 'valid')
#     plt.figure()
#     plt.plot(smooth_history)
#     plt.xlabel("Number of epochs")
#     plt.ylabel("Loss")
#     plt.title("Loss histories ")
#     plt.show()

#     plt.figure()
#     plt.hist(to_numpy(pnl), bins=100)
#     plt.title("Profit-loss histograms of 50000 price paths for a European option")
#     plt.xlabel("Profit-loss")
#     plt.ylabel("Number of events")
#     plt.grid()
#     plt.show()

#     print('Option price is ', price)

#     wealth = hedger_old(data_set_old)
#     plt.scatter(paths[:,-1],payoff[:,-1])
#     plt.scatter(paths[:,-1],wealth.detach()[:,-1])
#     plt.show()
    

# data_set_old = [paths, information, payoff[:,-1,:]]
# dataset_market_old  = datahedger.MarketDataset(data_set_old)

# reload(mlp)
# model = mlp.NeuralNetSequential(n_output = n_asset)
# hedger_old = datahedgerold.DataHedger(model, dataset_market_old) 
# history = hedger_old.fit(50)
# plot_helper(hedger_old, history)


# if __name__ == "__main__":
#     pass